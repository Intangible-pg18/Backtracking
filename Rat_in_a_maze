>> A Maze is given as N*N binary matrix of blocks where source block is the upper left most block i.e., maze[0][0] and destination block is lower rightmost block i.e.,
maze[N-1][N-1]. A rat starts from source and has to reach the destination. The rat can move only in two directions: forward and down. In the maze matrix, 0 means the 
block is a dead end and 1 means the block can be used in the path from source to destination.




#include <stdio.h>  
using namespace std;

bool isSafe(int** arr,int x, int y,int n) {
 if(x<n && y<n && arr[x][y]==1)
  return true;
 return false;
}

bool ratinMaze(int **arr,int x,int y, int n, int** solArr) {
 if(x==n-1 && y==n-1) {
  solArr[x][y]=1;
  return true;
 }
 if(isSafe(arr,x,y,n)) {
  solArr[x][y]=1;
  if (ratinMaze(arr,x+1,y,n,solArr)) 
   return true;
  if(ratinMaze(arr,x,y+1,n,solArr))
   return true;
  solArr[x][y]=0;
  return false;
 }
 return false;
}

int main() { 
 int n;
 cin>>n;
 int** arr=new int*[n];
 for(int i=0;i<n;i++) {
  arr[i]=new int[n];
 }
 for(int i=0;i<n;i++) {
  for(int j=0;j<n;j++) {
   cin>>arr[i][j];
  }
 }
 int** solArr=new int*[n];
 for(int i=0;i<n;i++) {
  solArr[i]=new int[n];
  for(int j=0;j<n;j++) {
   solArr[i][j]=0;
  }
 }
 if(ratinMaze(arr,0,0,n,solArr)) {
  for(int i=0;i<n;i++) {
   for(int j=0;j<n;j++) {
    cout<<solArr[i][j];
   }
  }
 }
 return 0;
 }
} 
